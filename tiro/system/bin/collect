#! /usr/bin/perl
use warnings; # Full warnings
use strict; # Strict error checking
$|++; # Unbuffer stdout
umask 0077; # Default to private files
delete @ENV{qw(PATH IFS CDPATH ENV BASH_ENV)}; # Make %ENV safer

# Configuration
use constant CONFIG_FILE => 'system/tiro.cfg';
use lib 'system/lib';

use Tiro;
use Carp qw(verbose);
use File::Copy qw(copy); # NOTE: move() has tainting issues
use Getopt::Long qw(:config auto_version auto_help);
use File::Spec::Functions;
use File::Path qw(mkpath);
use Pod::Usage;

$main::VERSION=1.1;
my ($BEFORE, $AFTER, @USERS, @ASSIGNMENTS, $FAILED, $DRYRUN);
my ($VERBOSE, $GROUPS) = (1, 1);

GetOptions('before=s' => \$BEFORE, 'after=s' => \$AFTER, 'user=s@' => \@USERS,
           'failed!' => \$FAILED, 'groups!' => \$GROUPS,
           'verbose!' => \$VERBOSE, 'dryrun!' => \$DRYRUN);

=head1 SYNOPSIS

collect [options] <assignment-filename> <destination-directory>

B<NOTE:> The assignment is specified as a filename not the assignment name.

=head2 OPTIONS

=item --before=date

    Collect only submissions submitted before this date.  Defaults to the
    assignment's late_after or due date.

=item --after=date

    Collect only submissions submitted after this date.

=item --user=username

    Collect only submissions for this user.  If repeated, then collect
    for each user.  If not specified, then collect for all users.

=item --failed, --nofailed (default): Collect failed submissions.

=item --groups (default), --nogroups: Use assignment user groups.

=item --verbose (default), --noverbose: Print verbose output.

=item --dryrun, --nodryrun (default): Don't run commands; just print them.


=cut

my ($ASSIGNMENT, $DST) = @ARGV;

pod2usage() unless defined $ASSIGNMENT and defined $DST;

my $tiro = Tiro->new(CONFIG_FILE);
my $assignment = $tiro->assignment($ASSIGNMENT);
my @users = @USERS ? map {$tiro->users->{$_}} @USERS : values %{$tiro->users};

# TODO: assignment name
$BEFORE = defined $BEFORE ? $BEFORE :
  $assignment->late_after ne '' ? $assignment->late_after : $assignment->due;
$AFTER = tiro_date($AFTER) if defined $AFTER and $AFTER ne '';
$BEFORE = tiro_date($BEFORE) if defined $BEFORE and $BEFORE ne '';

my @subs = $tiro->query(
  assignments=>[$assignment], users=>[@users], login=>undef, groups=>$GROUPS,
  start_date=>$AFTER, end_date=>$BEFORE, failed=>$FAILED, only_latest=>1,
  submissions_yes=>1);

print "Ensuring $DST exists.\n" if $VERBOSE;
mkpath($DST) unless $DRYRUN;
for (@subs) {
  my $src = catfile($tiro->submissions_dir, $assignment->id,
                    $_->user->id, $_->date . $_->failed);
  my $dst = catfile($DST, join('-', map {$_->id} @{$_->group}));
  print "Copying $src to $dst.\n" if $VERBOSE;
  system("cp", "--recursive", "--interactive", $src, $dst) unless $DRYRUN;
}
